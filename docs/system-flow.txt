- When we’re building a tool that’s supposed to work on multiple platforms,
- we also have to pay special attention to how we manipulate paths and file
- names to ensure our tool works appropriately no matter where it’s run.

- For example, Windows uses a backslash \ as a path separator,
- such as C:\WINDOWS\SYSTEM, while most variations of UNIX use the forward slash
- / instead, as in /usr/lib. In these scenarios, hard-coding paths and file
- names into the program can lead to errors or unexpected results.



File path package
To avoid these complications, Go provides the filepath package to manipulate paths,
ensuring compatibility across different operating systems. We’ll use this package
to develop a command-line tool called walk, which crawls into file system
directories looking for specific files. When the tool finds the files
it’s looking for, it can list, archive, or delete them. As we develop this
tool, we’ll apply the skills required to handle file system objects in our
own programs, such as creating directories, copying and deleting files, and
handling logs and compressed files. We’ll end up with a useful tool that
helps us back up and clean up file system



This initial version accepts four command-line parameters:

-root: The root of the directory tree to start the search. The default is the current directory.
-list: List files found by the tool. When specified, no other actions will be executed.
-ext: File extension to search. When specified, the tool will only match files with this extension.
-size: Minimum file size in bytes. When specified, the tool will only match files whose size is larger than this value.
path/filepath: To handle file paths appropriately across different operating systems.


we create the run() function. Its input parameters are:

root: A string representing the root directory to start the search.
out of type io.Writer interface: Representing the output destination.
cfg of custom type config: For the remaining optional parameters.
By using the io.Writer interface as the output destination, we can print results to the STDOUT in the program and to a bytes.Buffer when testing, which makes it easier to verify the output.


The filepath package uses either forward slashes or backslashes, depending on the operating system.



In the run() function, we define the logic to descend into the directory identified by the flag root and find all the files and subdirectories under it. The package filepath provides
a function named Walk() that does exactly that.

The filepath.Walk(root string, walkFn WalkFunc) function finds all the files and directories under root, and executes the function walkFn to each of them.
The function walkFn is a function of type filepath.WalkFunc defined with the signature func(path string, info os.FileInfo, err error) error, where the arguments represent:

path: A string representing the path of the file or directory currently processed by Walk().
info: Of type os.FileInfo containing metadata about the file or directory named by path, such as name, size, permissions, and others.
err: Of type error containing
 the error in case Walk() has an issue walking to that specific file or directory.



 The buffer in this context is an instance of bytes.Buffer, which implements the io.Writer interface. This allows you to:

 Capture Output:

 The run function writes output to an io.Writer.
 By passing a buffer instead of directly writing to os.Stdout,
 you can capture and store the output for further inspection in your test cases.

 //  Formats a string as a quoted string literal, escaping any special characters (e.g., newlines, tabs, or quotes). %q
 // %s is the default format for strings



 // test configuration

 tc.cfg.ext = ".log"       // Files with the .log extension should be deleted.
 tc.nDelete = 5            // 5 .log files will be created (to be deleted).
 tc.extNoDelete = ".gz"    // Files with the .gz extension should not be deleted.
 tc.nNoDelete = 5          // 5 .gz files will be created (to remain intact).

tempDir is invoked
map[string]int{
    ".log": 5, // Create 5 .log files.
    ".gz":  5, // Create 5 .gz files.
}


Directory Contents (Before Running run) The createTempDir function creates the following structure

/tmp/walktest/
  file1.log
  file2.log
  file3.log
  file4.log
  file5.log
  file1.gz
  file2.gz
  file3.gz
  file4.gz
  file5.gz

  5 .log files are created with dummy content.
  5 .gz files are created with dummy content.


FileConfig{
    ext: ".log", // Target .log files for deletion.
    del: true,   // Enable deletion mode.
}



Without t.Helper()
Here’s a helper function and test:

func createTempDir(t *testing.T) string {
	tempDir, err := os.MkdirTemp("", "test")
	if err != nil {
		t.Fatal("Failed to create temporary directory")
	}
	return tempDir
}

func TestExample(t *testing.T) {
	tempDir := createTempDir(t)
	defer os.RemoveAll(tempDir)
}
Now imagine os.MkdirTemp fails. The output will look like this:

--- FAIL: TestExample (0.00s)
    helper.go:4: Failed to create temporary directory
The error points to helper.go:4 (inside createTempDir).
This tells you that something failed inside createTempDir,
but it doesn’t immediately tell you which test case caused the issue (TestExample in this case).

With t.Helper()
Now add t.Helper() to the helper function:

func createTempDir(t *testing.T) string {
	t.Helper() // Mark this as a helper function
	tempDir, err := os.MkdirTemp("", "test")
	if err != nil {
		t.Fatal("Failed to create temporary directory")
	}
	return tempDir
}

func TestExample(t *testing.T) {
	tempDir := createTempDir(t)
	defer os.RemoveAll(tempDir)
}
If os.MkdirTemp fails, the output will look like this:

--- FAIL: TestExample (0.00s)
    example_test.go:9: Failed to create temporary directory
The error now points to example_test.go:9 (inside TestExample), not createTempDir.
This is more helpful because it shows which test case failed (TestExample).


The t.Helper() function:

Improves error reporting by attributing failures to the calling test function, not the helper.
Keeps the test output clean and focused on the relevant test case.
Marks functions that assist in testing (e.g., setup or assertions) as secondary.